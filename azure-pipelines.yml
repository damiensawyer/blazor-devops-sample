# ASP.NET Core (.NET Framework)
# Build and test ASP.NET Core projects targeting the full .NET Framework.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- main

pool:
  #vmImage: 'windows-latest'
  vmImage: 'ubuntu-22.04'

variables:
  solution: 'simplesite.sln'
  serverProject: './Server/simplesite.Server.csproj'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  workingDirectory: '$(Build.SourcesDirectory)'
  outputDirectory: '$(Build.outputDirectory)'

steps:
  # Use .NET Core v2
# Acquires a specific version of the .NET Core SDK from the internet or the local cache and adds it to the PATH. Use this task to change the version of .NET Core used in subsequent tasks. Additionally provides proxy support.
- task: UseDotNet@2
  inputs:
    packageType: 'sdk' # 'runtime' | 'sdk'. Package to install. Default: sdk.
    #useGlobalJson: false # boolean. Optional. Use when packageType = sdk. Use global json. Default: false.
    #workingDirectory: # string. Optional. Use when useGlobalJson = true. Working Directory. 
    version: '6.0.110' # string. Optional. Use when useGlobalJson = false || packageType = runtime. Version. 
    #includePreviewVersions: false # boolean. Optional. Use when useGlobalJson = false  || packageType = runtime. Include Preview Versions. Default: false.
  # Advanced
    #vsVersion: # string. Compatible Visual Studio version. 
    #installationPath: '$(Agent.ToolsDirectory)/dotnet' # string. Path To Install .Net Core. Default: $(Agent.ToolsDirectory)/dotnet.
    #performMultiLevelLookup: false # boolean. Perform Multi Level Lookup. Default: false.

# - task: NuGetToolInstaller@1
#   inputs:
#     versionSpec: 
#     checkLatest: true

# - task: NuGetCommand@2
#   inputs:
#     command: 'restore'
#     restoreSolution: '$(solution)'
#     feedsToUse: 'select'
#     noCache: false

- script: |
    dotnet restore $(solution) 
  displayName: Restore
  workingDirectory: $(workingDirectory)

# - script: |
#     dotnet build $(solution) --configuration $(buildConfiguration) --platform $(buildPlatform) -v normal --no-restore 
#   displayName: Build
#   workingDirectory: $(workingDirectory)


# Note below, you can only specify arch (or runtime, not both) and self-contained if you build a single project. Perhaps do them separately.
- bash: |
    dotnet build $(solution) \
    --configuration $(buildConfiguration) \
    --no-restore \
    --verbosity normal 
  displayName: Build
  workingDirectory: $(workingDirectory)


# - script: |
#     dotnet publish $(solution) \
#     --output publish
#   displayName: publish
#   workingDirectory: $(workingDirectory)


- script: |
    dotnet publish $(serverProject) \
    --output publish \
    --self-contained \
    --arch x64 
  displayName: publish
  workingDirectory: $(workingDirectory)

# - task: NuGetToolInstaller@1

# - task: NuGetCommand@2
#   inputs:
#     restoreSolution: '$(solution)'

# - task: VSBuild@1
#   inputs:
#     solution: '$(solution)'
#     msbuildArgs: '/p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:DesktopBuildPackageLocation="$(build.artifactStagingDirectory)\WebApp.zip" /p:DeployIisAppPath="Default Web Site"'
#     platform: '$(buildPlatform)'
#     configuration: '$(buildConfiguration)'

- task: VSTest@2
  inputs:
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'
